from fastapi.testclient import TestClient
import pytest
from testfixtures import compare


@pytest.fixture
def client():
    from samples.echo.main import worker
    with TestClient(worker.fastapi_app) as client:
        yield client


def test_app(client):
    response = client.get("/docs")
    response.raise_for_status()


task_type = 'echo_dev'


def test_api_json(client):
    response = client.get("/api.json")
    response.raise_for_status()

    compare(response.json(), {'tasks': [
        {'name': 'echo_dev', 'options': {'properties': {
            'files': {'additionalProperties': {'type': 'string'}, 'description': 'Files to be used by the task', 'title': 'Files', 'type': 'object'},
            'message': {'title': 'Message', 'type': 'string'},
            'echo_error': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'default': None, 'title': 'Echo Error'}
        }, 'required': ['message'], 'title': 'EchoTaskOptions', 'type': 'object'}, 'options_class': 'EchoTaskOptions', 'result': {'properties': {
            'files': {'additionalProperties': {'type': 'string'}, 'description': 'Files generated by the task', 'title': 'Files', 'type': 'object'},
            'statistics': {'description': 'Statistics generated by the task', 'title': 'Statistics', 'type': 'object'},
            'message': {'title': 'Message', 'type': 'string'}, 'file_info': {'title': 'File Info', 'type': 'object'}
        }, 'required': ['message', 'file_info'], 'title': 'EchoResult', 'type': 'object'}, 'result_class': 'EchoResult', 'doc': 'No documentation for echo_task'}]})


def new_task(client):
    response = client.post(f"/task/{task_type}/create")
    response.raise_for_status()
    obj = response.json()
    compare(obj['status'], 'draft')
    return obj['id']


def test_check_status(client):
    id = new_task(client)
    response = client.get(f"/task/{task_type}/{id}")
    response.raise_for_status()
    obj = response.json()
    compare(obj['status'], 'draft')



def scheduled_task(client):
    id = new_task(client)
    response = client.post(f"/task/{task_type}/{id}/schedule", json={
        "message": "Hello World",
        "files": {
            "file1": "https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png",
            "file2": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_92x30dp.png",
        }
    })
    response.raise_for_status()
    obj = response.json()
    compare(obj['status'], 'scheduled')
    return id



def scheduled_error_task(client):
    id = new_task(client)
    response = client.post(f"/task/{task_type}/{id}/schedule", json={
        "message": "Hello World",
        "echo_error": "Error message"
    })
    response.raise_for_status()
    obj = response.json()
    compare(obj['status'], 'scheduled')
    return id


def test_check_status_after_schedule(client):
    id = scheduled_task(client)
    response = client.get(f"/task/{task_type}/{id}")
    response.raise_for_status()
    obj = response.json()
    compare(obj['status'], 'scheduled')


def wait_for_result(client, id):
    import time
    for i in range(30):
        response = client.get(f"/task/{task_type}/{id}")
        if response.status_code == 509:
            raise Exception(response.json()['detail'])
        response.raise_for_status()
        obj = response.json()
        if obj['status'] == 'completed':
            return obj['result']
        time.sleep(0.1)
    raise Exception("Timeout")


def test_check_result_error(client):
    id = scheduled_error_task(client)
    with pytest.raises(Exception, match="Server error '509"):
        wait_for_result(client, id)


def test_check_result(client):
    id = scheduled_task(client)
    result = wait_for_result(client, id)

    compare(result, {
        'message': 'Hello World',
        'file_info': {
            'file1': {
                'filename': 'googlelogo_color_92x30dp.png',
                'size': 4162,
                'type': 'image/png'
            },
            'file2': {
                'filename': 'googlelogo_color_92x30dp.png',
                'size': 4162,
                'type': 'image/png'
            }
        },
        'files': {
            'file1': 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png',
            'file2': 'https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_92x30dp.png'
        },
        'statistics': {}
    })
